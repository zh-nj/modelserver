import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle, createStaticVNode as _createStaticVNode } from "vue";
const _hoisted_1 = {
  key: 0,
  class: "preloader-inner"
};
const _hoisted_2 = /*#__PURE__*/_createElementVNode("svg", {
  viewBox: "0 0 36 36"
}, [/*#__PURE__*/_createElementVNode("circle", {
  cx: "18",
  cy: "18",
  r: "16"
})], -1);
const _hoisted_3 = [_hoisted_2];
const _hoisted_4 = {
  key: 1,
  class: "preloader-inner"
};
const _hoisted_5 = /*#__PURE__*/_createStaticVNode("<span class=\"preloader-inner-line\"></span><span class=\"preloader-inner-line\"></span><span class=\"preloader-inner-line\"></span><span class=\"preloader-inner-line\"></span><span class=\"preloader-inner-line\"></span><span class=\"preloader-inner-line\"></span><span class=\"preloader-inner-line\"></span><span class=\"preloader-inner-line\"></span>", 8);
const _hoisted_13 = [_hoisted_5];
const _hoisted_14 = {
  key: 2,
  class: "preloader-inner"
};
function render(_ctx, _cache) {
  return _openBlock(), _createElementBlock("div", {
    class: _normalizeClass(_ctx.classes),
    style: _normalizeStyle(_ctx.style)
  }, [_ctx.theme && _ctx.theme.md ? (_openBlock(), _createElementBlock("span", _hoisted_1, _hoisted_3)) : _ctx.theme && _ctx.theme.ios ? (_openBlock(), _createElementBlock("span", _hoisted_4, _hoisted_13)) : !_ctx.theme ? (_openBlock(), _createElementBlock("span", _hoisted_14)) : _createCommentVNode("", true)], 6);
}
import { computed } from 'vue';
import { classNames } from '../shared/utils.js';
import { colorClasses, colorProps } from '../shared/mixins.js';
import { useTheme } from '../shared/use-theme.js';
export default {
  name: 'f7-preloader',
  render,
  props: {
    size: [Number, String],
    ...colorProps
  },
  setup(props) {
    const theme = useTheme();
    const classes = computed(() => classNames('preloader', {
      preloader: true
    }, colorClasses(props)));
    const style = computed(() => {
      const preloaderStyle = {};
      let sizeComputed = props.size;
      if (sizeComputed && typeof sizeComputed === 'string' && sizeComputed.indexOf('px') >= 0) {
        sizeComputed = sizeComputed.replace('px', '');
      }
      if (sizeComputed) {
        preloaderStyle.width = `${sizeComputed}px`;
        preloaderStyle.height = `${sizeComputed}px`;
        preloaderStyle['--f7-preloader-size'] = `${sizeComputed}px`;
      }
      return preloaderStyle;
    });
    return {
      classes,
      style,
      theme
    };
  }
};