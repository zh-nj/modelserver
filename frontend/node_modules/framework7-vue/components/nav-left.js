import { resolveComponent as _resolveComponent, normalizeClass as _normalizeClass, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, renderSlot as _renderSlot, createElementBlock as _createElementBlock } from "vue";
function render(_ctx, _cache) {
  const _component_f7_link = _resolveComponent("f7-link");
  return _openBlock(), _createElementBlock("div", {
    class: _normalizeClass(_ctx.classes)
  }, [_ctx.backLink ? (_openBlock(), _createBlock(_component_f7_link, {
    key: 0,
    href: _ctx.backLinkUrl || '#',
    back: "",
    icon: "icon-back",
    force: _ctx.backLinkForce || undefined,
    class: _normalizeClass(!_ctx.text ? 'icon-only' : undefined),
    text: _ctx.text,
    onClick: _ctx.onBackClick
  }, null, 8, ["href", "force", "class", "text", "onClick"])) : _createCommentVNode("", true), _renderSlot(_ctx.$slots, "default")], 2);
}
import { computed } from 'vue';
import { classNames } from '../shared/utils.js';
import { colorClasses, colorProps } from '../shared/mixins.js';
import { useTheme } from '../shared/use-theme.js';
import f7Link from './link.js';
export default {
  name: 'f7-nav-left',
  render,
  components: {
    f7Link
  },
  props: {
    backLink: [Boolean, String],
    backLinkUrl: String,
    backLinkForce: Boolean,
    backLinkShowText: {
      type: Boolean,
      default: undefined
    },
    sliding: Boolean,
    ...colorProps
  },
  emits: ['back:click', 'click:back'],
  setup(props, _ref) {
    let {
      emit
    } = _ref;
    const onBackClick = event => {
      emit('back:click', event);
      emit('click:back', event);
    };
    const theme = useTheme();
    const text = computed(() => {
      let needBackLinkText = props.backLinkShowText;
      if (typeof needBackLinkText === 'undefined') needBackLinkText = !theme.value.md;
      if (props.backLink) {
        return props.backLink !== true && needBackLinkText ? props.backLink : undefined;
      }
      return undefined;
    });
    const classes = computed(() => classNames('left', {
      sliding: props.sliding
    }, colorClasses(props)));
    return {
      classes,
      onBackClick,
      text
    };
  }
};