version: '3.8'

services:
  # 后端API服务
  llm-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: llm-inference-backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=mysql+pymysql://root:@host.docker.internal:4000/llm_inference?charset=utf8mb4
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
      - METRICS_STORAGE_PATH=/app/data/metrics.db
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/data:/app/data
      - ./configs:/app/configs
      - /var/run/docker.sock:/var/run/docker.sock  # Docker socket for container management
    depends_on:
      - redis
    extra_hosts:
      - "host.docker.internal:host-gateway"  # 允许容器访问宿主机的TiDB
    restart: unless-stopped
    networks:
      - llm-network

  # 注意: TiDB现在使用本地tiup playground运行
  # 请在启动Docker服务前先运行: ./scripts/start-tidb.sh
  # TiDB服务地址: http://localhost:4000
  # PD服务地址: http://localhost:2379

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: llm-inference-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - llm-network

  # 前端Web服务
  llm-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: llm-inference-frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_BASE_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000
    depends_on:
      - llm-backend
    restart: unless-stopped
    networks:
      - llm-network

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: llm-inference-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx.conf:/etc/nginx/nginx.conf
      - ./configs/ssl:/etc/nginx/ssl
    depends_on:
      - llm-backend
      - llm-frontend
    restart: unless-stopped
    networks:
      - llm-network

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: llm-inference-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - llm-network

  # Grafana仪表板
  grafana:
    image: grafana/grafana:latest
    container_name: llm-inference-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - llm-network

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  llm-network:
    driver: bridge